@using EventEase.Models

<div class="event-card @(IsHighlighted ? "highlighted" : "")">
    <div class="event-image">
        <img src="@Event.ImageUrl" alt="@Event.Name" />
        <span class="event-category">@Event.Category</span>
        @if (Event.IsFull)
        {
            <span class="sold-out-badge">SOLD OUT</span>
        }
    </div>

    <div class="event-content">
        <h3 class="event-title">@Event.Name</h3>
        <p class="event-description">@Event.Description</p>

        <div class="event-meta">
            <div class="meta-item">
                <span class="meta-icon">📅</span>
                <span>@Event.Date.ToString("MMM dd, yyyy")</span>
            </div>
            <div class="meta-item">
                <span class="meta-icon">📍</span>
                <span>@Event.Location</span>
            </div>
            <div class="meta-item">
                <span class="meta-icon">👥</span>
                <span>@Event.CurrentAttendees / @Event.MaxAttendees</span>
            </div>
        </div>

        <AttendanceTracker EventId="@Event.Id"
                          CurrentAttendees="@Event.CurrentAttendees"
                          MaxAttendees="@Event.MaxAttendees" />

        <div class="event-actions">
            <button class="btn btn-secondary btn-sm" @onclick="OnToggleHighlight">
                @(IsHighlighted ? "★ Featured" : "☆ Feature")
            </button>
            <a href="/event-details/@Event.Id" class="btn btn-primary">View Details</a>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Event Event { get; set; } = null!;

    [Parameter]
    public bool IsHighlighted { get; set; }

    [Parameter]
    public EventCallback<bool> IsHighlightedChanged { get; set; }

    private async Task OnToggleHighlight()
    {
        IsHighlighted = !IsHighlighted;
        await IsHighlightedChanged.InvokeAsync(IsHighlighted);
    }
}
